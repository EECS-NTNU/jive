include tests/arch/Makefile.sub
include tests/frontend/Makefile.sub
include tests/function/Makefile.sub
include tests/i386/Makefile.sub
include tests/regalloc/Makefile.sub
include tests/shape/Makefile.sub
include tests/serialization/Makefile.sub
include tests/transforms/Makefile.sub
include tests/types/Makefile.sub
include tests/util/Makefile.sub
include tests/vsdg/Makefile.sub

TESTPROGS=test-runner

TEST_SOURCES = tests/testtypes.c tests/testarch.c tests/testnodes.c tests/test-runner.c tests/test-registry.c $(patsubst %, tests/%.c, $(TESTS))
SOURCES += $(TEST_SOURCES)

tests/test-runner: LDFLAGS+=-L. -Wl,-whole-archive -ljive -Wl,-no-whole-archive
tests/test-runner: %: $(patsubst %.c, %.la, $(TEST_SOURCES)) libjive.a
	$(CXX) -o $@ $(filter %.la, $^) $(LDFLAGS)

$(patsubst %, tests/%.la, $(TESTS)): CPPFLAGS+=-Itests
$(patsubst %, .dep/tests/%.la.d, $(TESTS)): CPPFLAGS+=-Itests
$(patsubst %, .dep/tests/%.lo.d, $(TESTS)): CPPFLAGS+=-Itests

TESTLOG=true

EXPECT_FAIL_TESTS = regalloc/test-loop-overflow
EXPECT_PASS_TESTS = $(filter-out $(EXPECT_FAIL_TESTS),$(TESTS))

check: tests/test-runner
	rm -rf check.log
	@UNEXPECTED_FAILED_TESTS="" ; \
	for TEST in $(EXPECT_PASS_TESTS); do \
		$(TESTLOG) -n "$$TEST: " ; if tests/test-runner $$TEST >>check.log 2>&1 ; then $(TESTLOG) pass ; else $(TESTLOG) FAIL ; UNEXPECTED_FAILED_TESTS="$$UNEXPECTED_FAILED_TESTS $$TEST" ; fi ; \
	done ; \
	if [ "x$$UNEXPECTED_FAILED_TESTS" != x ] ; then echo "Failed tests:$$UNEXPECTED_FAILED_TESTS" ; else echo "All tests passed" ; fi ; \
	if [ "x$(EXPECT_FAIL_TESTS)" != x ] ; then echo "Expected failures: $(EXPECT_FAIL_TESTS)" ; fi

valgrind-check: tests/test-runner
	rm -rf check.log
	@UNEXPECTED_FAILED_TESTS="" ; \
	for TEST in $(EXPECT_PASS_TESTS); do \
		$(TESTLOG) -n "$$TEST: " ; if valgrind --leak-check=full --error-exitcode=1 tests/test-runner $$TEST >>check.log 2>&1 ; then $(TESTLOG) pass ; else $(TESTLOG) FAIL ; FAILED_TESTS="$$UNEXPECTED_FAILED_TESTS $$TEST" ; fi ; \
	done ; \
	if [ "x$$UNEXPECTED_FAILED_TESTS" != x ] ; then echo "Failed tests:$$UNEXPECTED_FAILED_TESTS" ; else echo "All tests passed" ; fi ; \
	if [ "x$(EXPECT_FAIL_TESTS)" != x ] ; then echo "Expected failures: $(EXPECT_FAIL_TESTS)" ; fi
